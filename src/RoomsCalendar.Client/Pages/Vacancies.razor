@page "/vacancies"
@using RoomsCalendar.Share.Constants
@inject TimeZoneInfo TimeZone

<div class="flex flex-col gap-y-4">

    <h2>
        空き教室 (β版)
    </h2>

    @if (VacantRoomsProvider is not null && VacantRoomsProvider.LastUpdatedAt != default)
    {
        <div class="flex flex-row gap-2 flex-wrap tx-body2">
            <span>
                最終更新
            </span>
            <span>
                @($"{VacantRoomsProvider.LastUpdatedAt.ToOffset(TimeSpan.FromHours(9)).DateTime:yyyy/MM/dd HH:mm}") (JST)
            </span>
        </div>
    }
    else
    {
        <AlertCard Type="AlertCard.AlertType.Information"
                   Title="部屋情報がありません">
            <p>
                サーバーの起動直後は部屋情報が表示されません。
                時間を空けてもう一度アクセスしてください。
            </p>
        </AlertCard>
    }

    <AlertCard Type="AlertCard.AlertType.Warning">
        最新の情報と異なる場合があります。
        部屋の利用前には必ず大学ウェブサイトをご確認ください。
    </AlertCard>

    <div class="grid md:grid-cols-2 gap-3 grow">
        @if (roomsVacantNow.Length == 0)
        {
            <p>
                現在利用可能な部屋はありません。
            </p>
        }
        else
        {
            @foreach (var r in roomsVacantNow)
            {
                <RoomCard PlaceName="@r.PlaceName"
                          AvailableTimes="@([(r.AvailableSince, r.AvailableUntil)])"
                          IsKnoqRegistered="true" />
            }
        }
    </div>

</div>

@code {
    [Inject(Key = RoomsProviderNames.TitechVacant)]
    IRoomsProvider? VacantRoomsProvider { get; set; }

    Room[] roomsVacantNow = [];

    protected override async Task OnInitializedAsync()
    {
        if (VacantRoomsProvider is not null)
        {
            var timeZoneToday = TimeZoneInfo.ConvertTimeToUtc(
                TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZone).Date,
                TimeZone
            );
            var utcNow = DateTimeOffset.UtcNow;
            roomsVacantNow = await VacantRoomsProvider.GetRoomsAsync(utcNow, utcNow, CancellationToken.None);
            roomsVacantNow.AsSpan().Sort((x, y) =>
            {
                var constRooms = Share.Constants.TitechRooms.Rooms;
                bool xExists, yExists;
                Share.Usecase.TitechRoomInfo xRoom, yRoom;
                if (constRooms.TryGetAlternateLookup<ReadOnlySpan<char>>(out var lookup))
                {
                    xExists = lookup.TryGetValue(new Share.Usecase.TitechRoomInfo(x.PlaceName).Name, out xRoom);
                    yExists = lookup.TryGetValue(new Share.Usecase.TitechRoomInfo(y.PlaceName).Name, out yRoom);
                }
                else
                {
                    xExists = constRooms.TryGetValue(new Share.Usecase.TitechRoomInfo(x.PlaceName).Name.ToString(), out xRoom);
                    yExists = constRooms.TryGetValue(new Share.Usecase.TitechRoomInfo(y.PlaceName).Name.ToString(), out yRoom);
                }
                return (xExists, yExists) switch
                {
                    (true, true) => yRoom.Capacity.GetValueOrDefault().CompareTo(xRoom.Capacity.GetValueOrDefault()),
                    (true, false) => -1,
                    (false, true) => 1,
                    _ => 0
                };
            });
        }
    }
}
