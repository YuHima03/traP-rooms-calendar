@page "/"
@using System.Diagnostics.CodeAnalysis
@inject IServiceProvider Services
@inject RoomsCalendar.Share.Domain.IEventsProvider EventsProvider
@inject TimeZoneInfo TimeZone

<PageTitle>進捗部屋情報</PageTitle>

<div class="flex flex-col gap-y-4">

    <h2>今後の進捗部屋</h2>

    @if (RoomsProvider.LastUpdatedAt == default)
    {
        <AlertCard Type="AlertCard.AlertType.Information"
                   Title="部屋情報がありません">
            <p>
                サーバーの起動直後は部屋情報が表示されません。
                時間を空けてもう一度アクセスしてください。
            </p>
        </AlertCard>
    }
    else
    {
        <div class="flex flex-row gap-2 flex-wrap tx-body2">
            <span>
                最終更新
            </span>
            <span>
                @($"{RoomsProvider.LastUpdatedAt.ToOffset(TimeSpan.FromHours(9)).DateTime:yyyy/MM/dd HH:mm}") (JST)
            </span>
        </div>
    }

</div>

@if (GroupedRooms is null)
{
    <p>読み込み中......</p>
}
else if (GroupedRooms.Count == 0 && RoomsProvider.LastUpdatedAt != default)
{
    <p>部屋情報がありません。</p>
}
else
{
    @foreach (var (date, rooms) in GroupedRooms)
    {
        <div class="flex flex-col gap-y-3
                                    md:flex-row md:flex-nowrap md:gap-x-4">

            <div class="tx-body-strong w-[6rem] pt-2 shrink-0">
                <h3>
                    @{
                        var diff = date.DayNumber - JstToday.DayNumber;
                        if (diff == 0)
                        {
                            <span>今日</span>
                        }
                        else if (diff == 1)
                        {
                            <span>明日</span>
                        }
                        else
                        {
                            <span>@(string.Create(JapaneseCulture, $"{date:MM/dd (ddd)}"))</span>
                        }
                    }
                </h3>
            </div>
            <div class="grid md:grid-cols-2 gap-3 grow">
                @foreach (var r in rooms)
                {
                    <RoomCard PlaceName="@r.Key"
                              AvailableTimes="@([.. r.Value.Select(v => (v.Item1.Room.AvailableSince, v.Item1.Room.AvailableUntil))])"
                              Events="@([.. r.Value.SelectMany(v => v.Item1.HeldEvents)])"
                              IsKnoqRegistered="@r.Value.Aggregate(false, (acc, v) => acc || v.KnoqRegistered)" />
                }
            </div>

        </div>
    }
}

<AlertCard Type="AlertCard.AlertType.Tips"
           Title="APIについて">
    <p>
        進捗部屋の情報は
        <a href="@($"/api/rooms")"
           target="_blank"
           class="font-medium text-note-primary text-balance underline hover:no-underline">
            <code>/api/rooms</code>
            <span class="material-symbols-rounded text-sm!">open_in_new</span>
        </a>
        から、イベントの情報は
        <a href="@($"/api/events")"
           target="_blank"
           class="font-medium text-note-primary text-balance underline hover:no-underline">
            <code>/api/events</code>
            <span class="material-symbols-rounded text-sm!">open_in_new</span>
        </a>
        から取得することができます。
    </p>
    <p>
        クエリパラメータ
        <code>since</code>
        と
        <code>until</code>
        に
        ISO8601
        形式の日時を指定して絞り込むことができます。
    </p>
</AlertCard>

@code {
    [Inject(Key = Share.RoomProviderNames.KnoqRegistered)]
    [NotNull]
    IRoomsProvider? RoomsProvider { get; set; }

    [Inject(Key = Share.RoomProviderNames.TitechReserved)]
    [NotNull]
    IRoomsProvider? TitechRoomsProvider { get; set; }

    SortedList<DateOnly, Dictionary<string, List<(RoomWithEvents, bool KnoqRegistered)>>>? GroupedRooms;

    DateOnly JstToday => DateOnly.FromDateTime(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZone));

    readonly static System.Globalization.CultureInfo JapaneseCulture = new("ja-JP", false);

    protected override async Task OnInitializedAsync()
    {
        var since = DateTime.UtcNow.AddHours(9).Date.AddHours(-9);
        var knoqRooms = (await RoomsProvider.GetRoomsAsync(since, DateTimeOffset.MaxValue, CancellationToken.None)).GroupBy(DateOnlyKeySelector);
        var titechRooms = (await TitechRoomsProvider.GetRoomsAsync(since, DateTimeOffset.MaxValue, CancellationToken.None)).GroupBy(DateOnlyKeySelector).ToDictionary(g => g.Key, g => g.ToList());

        foreach (var kr in knoqRooms.Where(kr => titechRooms.ContainsKey(kr.Key)))
        {
            foreach (var r in kr)
            {
                titechRooms[kr.Key].RemoveAll(x => x.PlaceName == r.PlaceName && r.AvailableSince <= x.AvailableSince && x.AvailableUntil <= r.AvailableUntil);
            }
        }

        GroupedRooms = [];
        foreach (var kr in knoqRooms)
        {
            if (!GroupedRooms.TryGetValue(kr.Key, out var rooms))
            {
                rooms = (GroupedRooms[kr.Key] = []);
            }
            foreach (var r in kr)
            {
                RoomWithEvents item = new()
                {
                    Room = r,
                    HeldEvents = (await EventsProvider.GetEventsAsync(r.AvailableSince, r.AvailableUntil, CancellationToken.None)).Where(e => e.PlaceName.Equals(r.PlaceName, StringComparison.OrdinalIgnoreCase))
                };
                if (rooms.TryGetValue(r.PlaceName, out var list))
                {
                    list.Add((item, true));
                }
                else
                {
                    rooms[r.PlaceName] = [(item, true)];
                }
            }
        }
        foreach (var tr in titechRooms.Where(tr => tr.Value.Count != 0))
        {
            if (!GroupedRooms.TryGetValue(tr.Key, out var rooms))
            {
                rooms = (GroupedRooms[tr.Key] = []);
            }
            foreach (var r in tr.Value)
            {
                RoomWithEvents item = new()
                {
                    Room = r,
                    HeldEvents = []
                };
                if (rooms.TryGetValue(r.PlaceName, out var list))
                {
                    list.Add((item, false));
                }
                else
                {
                    rooms[r.PlaceName] = [(item, false)];
                }
            }
        }

        DateOnly DateOnlyKeySelector(Room r)
        {
            return DateOnly.FromDateTime(TimeZoneInfo.ConvertTimeFromUtc(r.AvailableSince.UtcDateTime, TimeZone));
        }
    }

    sealed class RoomWithEvents
    {
        public required Room Room { get; init; }
        public required IEnumerable<Event> HeldEvents { get; init; }
    }
}
