@page "/"
@inject IServiceProvider Services
@inject RoomsCalendar.Share.Domain.IRoomsProvider RoomsProvider
@inject RoomsCalendar.Share.Domain.IEventsProvider EventsProvider
@inject TimeZoneInfo TimeZone

<PageTitle>進捗部屋情報</PageTitle>

<div class="flex flex-col gap-y-4">

    <h2>今後の進捗部屋</h2>

    <p>1か月先まで表示されます。</p>

    <p>その他の期間の情報は <code>/api/rooms?since={}&amp;until={}</code> を使ってください。</p>

</div>

@if (RoomsProvider.LastUpdatedAt == default)
{
    <AlertCard Type="AlertCard.AlertType.Information"
               Title="部屋情報がありません">
        <p>
            サーバーの起動直後は部屋情報が表示されません。
            時間を空けてもう一度アクセスしてください。
        </p>
    </AlertCard>
}
else
{
    <div class="flex flex-row gap-4 flex-wrap">
        <span class="tx-body-strong text-inherit">
            最終更新
        </span>
        <span>
            @($"{RoomsProvider.LastUpdatedAt.ToOffset(TimeSpan.FromHours(9)).DateTime:yyyy/MM/dd HH:mm}") (JST)
        </span>
    </div>
}

@if (GroupedRooms is null)
{
    <p>読み込み中......</p>
}
else if (GroupedRooms.Length == 0 && RoomsProvider.LastUpdatedAt != default)
{
    <p>部屋情報がありません。</p>
}
else
{
    @foreach (var (date, rooms) in GroupedRooms)
    {
        <div class="flex flex-col gap-y-3
                    md:flex-row md:flex-nowrap md:gap-x-4">

            <div class="tx-body-strong w-[5rem] pt-2 shrink-0">
                <h3>
                    @{
                        var diff = date.DayNumber - JstToday.DayNumber;
                        if (diff == 0)
                        {
                            <span>今日</span>
                        }
                        else if (diff == 1)
                        {
                            <span>明日</span>
                        }
                        else
                        {
                            <span>@(string.Create(JapaneseCulture, $"{date:MM/dd (ddd)}"))</span>
                        }
                    }
                </h3>
            </div>
            <div class="grid md:grid-cols-2 gap-3 grow">
                @foreach (var r in rooms)
                {
                    <RoomCard PlaceName="@r.Key"
                              AvailableTimes="@([.. r.Value.Select(v => (v.Room.AvailableSince, v.Room.AvailableUntil))])"
                              Events="@([.. r.Value.SelectMany(v => v.HeldEvents.Where(e => e.OccupiesRoom))])" />
                }
            </div>

        </div>
    }
}

@code {
    KeyValuePair<DateOnly, IEnumerable<KeyValuePair<string, IEnumerable<RoomWithEvents>>>>[]? GroupedRooms;

    DateOnly JstToday => DateOnly.FromDateTime(TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZone));

    readonly static System.Globalization.CultureInfo JapaneseCulture = new("ja-JP", false);

    protected override async Task OnInitializedAsync()
    {
        var since = DateTime.UtcNow.AddHours(9).Date.AddHours(-9);
        var until = since.AddDays(31).AddTicks(-1);
        var rooms = await RoomsProvider.GetRoomsAsync(since, until, CancellationToken.None);
        GroupedRooms = [.. rooms
            .GroupBy(r => DateOnly.FromDateTime(TimeZoneInfo.ConvertTimeFromUtc(r.AvailableSince.UtcDateTime, TimeZone)))
            .Select(dateRooms => KeyValuePair.Create(
                dateRooms.Key,
                dateRooms
                    .GroupBy(r => r.PlaceName)
                    .Select(g => KeyValuePair.Create(
                        g.Key,
                        g.ToAsyncEnumerable().SelectAwait(async r => new RoomWithEvents
                            {
                                Room = r,
                                HeldEvents = (await EventsProvider.GetEventsAsync(r.AvailableSince, r.AvailableUntil, CancellationToken.None))
                                    .Where(e => e.PlaceName.Equals(r.PlaceName, StringComparison.OrdinalIgnoreCase) && e.OccupiesRoom)
                            })
                            .ToBlockingEnumerable()
                    ))
            ))];
    }

    sealed class RoomWithEvents
    {
        public required Room Room { get; init; }
        public required IEnumerable<Event> HeldEvents { get; init; }
    }
}
